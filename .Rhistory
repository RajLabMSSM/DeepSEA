panel.grid.minor = element_blank())  +
scale_x_continuous(labels=function(x) sprintf("%.2f", x))
DeepSEA.plot_predictions <- function(deepsea.DAT,
label.snps,
keep_cols,
facet_xlabs = T,
custom_ylab=F){
deepsea.melt <- data.table::melt.data.table(data.table::data.table(deepsea.DAT),
id.vars = c("Locus","SNP","chr","pos"),
measure.vars = c("Kunkle(2019) GWAS",
"eQTL-probability",
"GWAS-probability",
"HGMD-probability",
"Functional significance score"),
variable.name = "Prediction",
value.name = "Probability")
deepsea.melt <- subset(deepsea.melt, Prediction %in% keep_cols, drop=F)
deepsea.melt$Prediction <- gsub("-| ","\n", deepsea.melt$Prediction)
deepsea.melt <- deepsea.melt %>% arrange(pos)
deepsea.melt$Prediction <- factor(deepsea.melt$Prediction, levels = unique(deepsea.melt$Prediction) )
deepsea.melt$Mb <- deepsea.melt$pos/1000000
# Plot
gp <- ggplot(data=deepsea.melt, aes(x=Mb, y=Probability, color=Probability)) +
geom_point() +
facet_grid(Prediction~Locus, scales = "free", drop = T) +
theme_dark() +
scale_color_viridis_c() +
geom_hline(yintercept = 0) +
geom_point(data=subset(deepsea.melt, SNP %in% label.snps ),
pch=21, fill=NA, size=4, color="blue", stroke=1.5, alpha=0.8,  label.padding = .25,) +
geom_label_repel(data=subset(deepsea.melt, SNP %in% label.snps ), aes(label=SNP),
alpha=.7,
# aes(color=Probability),
nudge_x = .5,
label.padding = .25,
label.size=NA,
seed = 1,
size = 3,
min.segment.length = 1) +
theme(#axis.title.x=element_blank(),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
rect = element_rect(fill = "transparent"),
panel.background = element_rect(fill = "transparent"),
strip.text.y = element_text(angle = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())  +
scale_x_continuous(labels=function(x) sprintf("%.2f", x))
if(facet_xlabs==F){
gp <- gp +
theme( strip.background.x = element_blank(),
strip.text.x = element_blank())
}
if(custom_ylab!=F){
gp <- gp + labs(y=custom_ylab, color=custom_ylab)
}
return(gp)
}
dat <- subset(deepsea.DAT, SNP %in% label.snps)
# GWAS row
gp1 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("Kunkle",colnames(deepsea.DAT), value=T ),
custom_ylab = "-log10(P-value)") +
scale_color_gradient(low="blue", high="red")
# DeepSEA rows
gp2 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("probability|Functional ",colnames(deepsea.DAT), value=T ),
facet_xlabs = T)
# Enrichment plots
enrich.plots <- DeepSEA.plot_enrichment(deepsea.DAT, label.snps)
ep <- cowplot::plot_grid(plotlist = enrich.plots, nrow=1)
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"), widths = c(1,1,.8))
gg
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"), widths = c(1,1,.8), heights = c(.2,1,1))
gg
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"),
widths = c(1,1,.8), heights = c(.2,1,1))
gg
dev.off()
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"),
widths = c(1,1,.8), heights = c(.2,1,1))
gg
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"),
widths = c(1,1,.8), heights = c(.5,1,1))
gg
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"),
widths = c(1,1,.8), heights = c(.5,2,.5))
gg
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"),
widths = c(1,1,.8),
heights = c(.5,1.5,.5))
gg
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"),
widths = c(1,.8,.5),
heights = c(.5,1.5,.5))
gg
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"),
widths = c(1,.8,.5),
heights = c(.5,1.5,.75))
gg
ggsave(filename = file.path(deepsea_path,"_plots","DeepSEA.predict.enrich.png"),
plot = gg, dpi = 600, height=10, width=25)
deepsea_path="./ROSMAP"
ggsave(filename = file.path(deepsea_path,"_plots","DeepSEA.predict.enrich.png"),
plot = gg, dpi = 600, height=10, width=25)
DeepSEA.plot_predictions <- function(deepsea.DAT,
label.snps,
keep_cols,
facet_xlabs = T,
custom_ylab=F){
deepsea.melt <- data.table::melt.data.table(data.table::data.table(deepsea.DAT),
id.vars = c("Locus","SNP","chr","pos"),
measure.vars = c("Kunkle(2019) GWAS",
"eQTL-probability",
"GWAS-probability",
"HGMD-probability",
"Functional significance score"),
variable.name = "Prediction",
value.name = "Probability")
deepsea.melt <- subset(deepsea.melt, Prediction %in% keep_cols, drop=F)
deepsea.melt$Prediction <- gsub("-| ","\n", deepsea.melt$Prediction)
deepsea.melt <- deepsea.melt %>% arrange(pos)
deepsea.melt$Prediction <- factor(deepsea.melt$Prediction, levels = unique(deepsea.melt$Prediction) )
deepsea.melt$Mb <- deepsea.melt$pos/1000000
# Plot
gp <- ggplot(data=deepsea.melt, aes(x=Mb, y=Probability, color=Probability)) +
geom_point() +
facet_grid(Prediction~Locus, scales = "free", drop = T) +
theme_dark() +
scale_color_viridis_c() +
geom_hline(yintercept = 0) +
geom_point(data=subset(deepsea.melt, SNP %in% label.snps ),
pch=21, fill=NA, size=4, color="blue", stroke=1.5, alpha=0.8,  label.padding = .25,) +
geom_label_repel(data=subset(deepsea.melt, SNP %in% label.snps ), aes(label=SNP),
alpha=.7,
# aes(color=Probability),
nudge_x = .5,
label.padding = .25,
label.size=NA,
seed = 1,
size = 3,
min.segment.length = 1) +
theme(#axis.title.x=element_blank(),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
rect = element_rect(fill = "transparent"),
panel.background = element_rect(fill = "transparent"),
strip.text.y = element_text(angle = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())  +
scale_x_continuous(labels=function(x) sprintf("%.2f", x))
if(facet_xlabs==F){
gp <- gp +
theme( strip.background.x = element_blank(),
strip.text.x = element_blank())
}
if(custom_ylab!=F){
gp <- gp + labs(y=custom_ylab, color=custom_ylab)
} else {gp <- gp + xlim(c(0,1.1))}
return(gp)
}
# GWAS row
gp1 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("Kunkle",colnames(deepsea.DAT), value=T ),
custom_ylab = "-log10(P-value)") +
scale_color_gradient(low="blue", high="red")
# DeepSEA rows
gp2 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("probability|Functional ",colnames(deepsea.DAT), value=T ),
facet_xlabs = T)
# Enrichment plots
enrich.plots <- DeepSEA.plot_enrichment(deepsea.DAT, label.snps)
# DeepSEA rows
gp2 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("probability|Functional ",colnames(deepsea.DAT), value=T ),
facet_xlabs = T)
DeepSEA.plot_predictions <- function(deepsea.DAT,
label.snps,
keep_cols,
facet_xlabs = T,
custom_ylab=F){
deepsea.melt <- data.table::melt.data.table(data.table::data.table(deepsea.DAT),
id.vars = c("Locus","SNP","chr","pos"),
measure.vars = c("Kunkle(2019) GWAS",
"eQTL-probability",
"GWAS-probability",
"HGMD-probability",
"Functional significance score"),
variable.name = "Prediction",
value.name = "Probability")
deepsea.melt <- subset(deepsea.melt, Prediction %in% keep_cols, drop=F)
deepsea.melt$Prediction <- gsub("-| ","\n", deepsea.melt$Prediction)
deepsea.melt <- deepsea.melt %>% arrange(pos)
deepsea.melt$Prediction <- factor(deepsea.melt$Prediction, levels = unique(deepsea.melt$Prediction) )
deepsea.melt$Mb <- deepsea.melt$pos/1000000
# Plot
gp <- ggplot(data=deepsea.melt, aes(x=Mb, y=Probability, color=Probability)) +
geom_point() +
facet_grid(Prediction~Locus, scales = "free", drop = T) +
theme_dark() +
scale_color_viridis_c() +
geom_hline(yintercept = 0) +
geom_point(data=subset(deepsea.melt, SNP %in% label.snps ),
pch=21, fill=NA, size=4, color="blue", stroke=1.5, alpha=0.8,  label.padding = .25,) +
geom_label_repel(data=subset(deepsea.melt, SNP %in% label.snps ), aes(label=SNP),
alpha=.7,
# aes(color=Probability),
nudge_x = .5,
label.padding = .25,
label.size=NA,
seed = 1,
size = 3,
min.segment.length = 1) +
theme(#axis.title.x=element_blank(),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
rect = element_rect(fill = "transparent"),
panel.background = element_rect(fill = "transparent"),
strip.text.y = element_text(angle = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())  +
scale_x_continuous(labels=function(x) sprintf("%.2f", x))
if(facet_xlabs==F){
gp <- gp +
theme( strip.background.x = element_blank(),
strip.text.x = element_blank())
}
if(custom_ylab!=F){
gp <- gp + labs(y=custom_ylab, color=custom_ylab)
} else {gp <- gp + ylim(c(0,1.1))}
return(gp)
}
# GWAS row
gp1 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("Kunkle",colnames(deepsea.DAT), value=T ),
custom_ylab = "-log10(P-value)") +
scale_color_gradient(low="blue", high="red")
# DeepSEA rows
gp2 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("probability|Functional ",colnames(deepsea.DAT), value=T ),
facet_xlabs = T)
# Enrichment plots
enrich.plots <- DeepSEA.plot_enrichment(deepsea.DAT, label.snps)
ep <- cowplot::plot_grid(plotlist = enrich.plots, nrow=1)
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"),
widths = c(1,.8,.5),
heights = c(.5,1.5,.75))
gg
DeepSEA.plot_predictions <- function(deepsea.DAT,
label.snps,
keep_cols,
facet_xlabs = T,
custom_ylab=F){
deepsea.melt <- data.table::melt.data.table(data.table::data.table(deepsea.DAT),
id.vars = c("Locus","SNP","chr","pos"),
measure.vars = c("Kunkle(2019) GWAS",
"eQTL-probability",
"GWAS-probability",
"HGMD-probability",
"Functional significance score"),
variable.name = "Prediction",
value.name = "Probability")
deepsea.melt <- subset(deepsea.melt, Prediction %in% keep_cols, drop=F)
deepsea.melt$Prediction <- gsub("-| ","\n", deepsea.melt$Prediction)
deepsea.melt <- deepsea.melt %>% arrange(pos)
deepsea.melt$Prediction <- factor(deepsea.melt$Prediction, levels = unique(deepsea.melt$Prediction) )
deepsea.melt$Mb <- deepsea.melt$pos/1000000
# Plot
gp <- ggplot(data=deepsea.melt, aes(x=Mb, y=Probability, color=Probability)) +
geom_point() +
facet_grid(Prediction~Locus, scales = "free", drop = T) +
theme_dark() +
scale_color_viridis_c() +
geom_hline(yintercept = 0) +
geom_point(data=subset(deepsea.melt, SNP %in% label.snps ),
pch=21, fill=NA, size=4, color="blue", stroke=1.5, alpha=0.8,  label.padding = .25,) +
geom_label_repel(data=subset(deepsea.melt, SNP %in% label.snps ), aes(label=SNP),
alpha=.7,
# aes(color=Probability),
nudge_x = .5,
label.padding = .25,
label.size=NA,
seed = 1,
size = 3,
min.segment.length = 1) +
theme(#axis.title.x=element_blank(),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
rect = element_rect(fill = "transparent"),
panel.background = element_rect(fill = "transparent"),
strip.text.y = element_text(angle = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())  +
scale_x_continuous(labels=function(x) sprintf("%.2f", x))
if(facet_xlabs==F){
gp <- gp +
theme( strip.background.x = element_blank(),
strip.text.x = element_blank())
}
if(custom_ylab!=F){
gp <- gp + labs(y=custom_ylab, color=custom_ylab)
} else {gp <- gp +scale_y_continuous(limits = c(0,1.1), breaks = c(0,.5, 1))  }
return(gp)
}
# GWAS row
gp1 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("Kunkle",colnames(deepsea.DAT), value=T ),
custom_ylab = "-log10(P-value)") +
scale_color_gradient(low="blue", high="red")
# DeepSEA rows
gp2 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("probability|Functional ",colnames(deepsea.DAT), value=T ),
facet_xlabs = T)
gp2
ep <- cowplot::plot_grid(plotlist = enrich.plots, nrow=1)
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"),
widths = c(1,.8,.5),
heights = c(.5,1.5,.75))
source('~/Desktop/DeepSEA/DeepSEA.R', echo=TRUE)
gg
DeepSEA.plot_predictions <- function(deepsea.DAT,
label.snps,
keep_cols,
facet_xlabs = T,
custom_ylab=F){
deepsea.melt <- data.table::melt.data.table(data.table::data.table(deepsea.DAT),
id.vars = c("Locus","SNP","chr","pos"),
measure.vars = c("Kunkle(2019) GWAS",
"eQTL-probability",
"GWAS-probability",
"HGMD-probability",
"Functional significance score"),
variable.name = "Prediction",
value.name = "Probability")
deepsea.melt <- subset(deepsea.melt, Prediction %in% keep_cols, drop=F)
deepsea.melt$Prediction <- gsub("-| ","\n", deepsea.melt$Prediction)
deepsea.melt <- deepsea.melt %>% arrange(pos)
deepsea.melt$Prediction <- factor(deepsea.melt$Prediction, levels = unique(deepsea.melt$Prediction) )
deepsea.melt <- deepsea.melt %>% arrange(pos)
deepsea.melt$Mb <- deepsea.melt$pos/1000000
# Plot
gp <- ggplot(data=deepsea.melt, aes(x=Mb, y=Probability, color=Probability)) +
geom_point() +
facet_grid(Prediction~Locus, scales = "free", drop = T) +
theme_dark() +
scale_color_viridis_c() +
geom_hline(yintercept = 0) +
geom_point(data=subset(deepsea.melt, SNP %in% label.snps ),
pch=21, fill=NA, size=4, color="blue", stroke=1.5, alpha=0.8,  label.padding = .25,) +
geom_label_repel(data=subset(deepsea.melt, SNP %in% label.snps ), aes(label=SNP),
alpha=.7,
# aes(color=Probability),
nudge_x = .5,
label.padding = .25,
label.size=NA,
seed = 1,
size = 3,
min.segment.length = 1) +
theme(#axis.title.x=element_blank(),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
rect = element_rect(fill = "transparent"),
panel.background = element_rect(fill = "transparent"),
strip.text.y = element_text(angle = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())  +
scale_x_continuous(labels=function(x) sprintf("%.2f", x))
if(facet_xlabs==F){
gp <- gp +
theme( strip.background.x = element_blank(),
strip.text.x = element_blank())
}
if(custom_ylab!=F){
gp <- gp + labs(y=custom_ylab, color=custom_ylab)
} else {gp <- gp +scale_y_continuous(limits = c(0,1.1), breaks = c(0,.5, 1))  }
return(gp)
}
DeepSEA.plot_enrichment <- function(deepsea.DAT, label.snps){
dat <- subset(deepsea.DAT, SNP %in% label.snps)
# infile.vcf.out.logfoldchange: Chromatin feature probability log fold changes log(p_alt/(1-p_alt))-log(p_ref/(1-p_ref)) for each variant. Computed by comparing the 'ref' and 'alt' files. Note that log fold change can be noisy when probabilities are small, therefore this score should be considered together with probability differences and E-values when evaluating the impact of a variant.
enrich.plots <- lapply(sort(unique(dat$Locus)), function(locus){
printer("DeepSEA:: Enrichment plot for",locus)
# Average by Annotation
locus.annot <- subset(dat, Locus==locus, .drop=T) %>%
dplyr::group_by(SNP) %>%
top_n(n=1, wt=logFC)
# ------- plot --------
enrich.plot <-  ggplot(locus.annot, aes(y=logFC, x=SNP, fill=logFC)) +
# geom_col(position = "dodge", show.legend = F) +
geom_bar(stat="identity", show.legend = F ) +
coord_flip() +
facet_grid(~Locus, drop=T, scales="free", space = "free") +
geom_text(aes(y=0, label=paste0(SNP,"\n",Annotation), hjust=.5, srt=0),
size=3, color="magenta", nudge_y = -.005) +
theme_dark() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
rect = element_rect(fill = "transparent"),
panel.background = element_rect(fill = "transparent"),
# strip.text.y = element_text(angle = 0),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
# labs(subtitle=paste0(locus,"\nEnrichment")) +
scale_fill_viridis_c() +
ylim(c(min(dat$logFC)-2, max(dat$logFC)))
# print(enrich.plot)
return(enrich.plot)
})
}
DeepSEA.stacked_plots <- function(root="~/Desktop/Fine_Mapping/",
deepsea_path="./ROSMAP",
deepsea.DAT=DeepSEA.prepare_data(deepsea_path=deepsea_path,
GWAS_path=file.path(root,"./Data/GWAS/Kunkle_2019/Kunkle_etal_Stage1_results.txt.gz") ),
label_topn=3){
# Get the top n SNPs to label
label.snps <- (deepsea.DAT %>% dplyr::select(Locus, SNP, `Functional significance score`) %>%
dplyr::group_by(Locus) %>%
top_n(n=label_topn, wt=`Functional significance score`))$SNP
deepsea.DAT <- subset(deepsea.DAT, !(Locus %in% c("LRRK2",NA)) ) %>%
dplyr::mutate("Kunkle(2019) GWAS"= -log10(as.numeric(Pvalue)))
# GWAS row
gp1 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("Kunkle",colnames(deepsea.DAT), value=T ),
custom_ylab = "-log10(P-value)") +
scale_color_gradient(low="blue", high="red")
# DeepSEA rows
gp2 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("probability|Functional ",colnames(deepsea.DAT), value=T ),
facet_xlabs = T)
# Enrichment plots
enrich.plots <- DeepSEA.plot_enrichment(deepsea.DAT, label.snps)
ep <- cowplot::plot_grid(plotlist = enrich.plots, nrow=1)
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"),
widths = c(1,.8,.5),
heights = c(.5,1.5,.75))
# gg
if(save_path!=F){
ggsave(filename = file.path(deepsea_path,"_plots","DeepSEA.predict.enrich.png"),
plot = gg, dpi = 600, height=10, width=25)
}
return(gp)
}
# GWAS row
gp1 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("Kunkle",colnames(deepsea.DAT), value=T ),
custom_ylab = "-log10(P-value)") +
scale_color_gradient(low="blue", high="red")
# DeepSEA rows
gp2 <- DeepSEA.plot_predictions(deepsea.DAT,
label.snps = label.snps,
keep_cols = grep("probability|Functional ",colnames(deepsea.DAT), value=T ),
facet_xlabs = T)
# Enrichment plots
enrich.plots <- DeepSEA.plot_enrichment(deepsea.DAT, label.snps)
ep <- cowplot::plot_grid(plotlist = enrich.plots, nrow=1)
# merge all plots
# cowplot::plot_grid(gp1, gp2, ep, ncol = 1)
gg <- ggpubr::ggarrange(gp1, gp2, ep, nrow = 3, align = c("hv"),
widths = c(1,.8,.5),
heights = c(.5,1.5,.75))
gg
ggsave(filename = file.path(deepsea_path,"_plots","DeepSEA.predict.enrich.png"),
plot = gg, dpi = 600, height=10, width=25)
